buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}") // Required for Kotlin integration
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}") // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: 'kotlin-spring' // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
// By default, types from Java APIs used in Kotlin are recognized as platform types for which null-checks are relaxed. Kotlin support for JSR 305 annotations + Spring nullability annotations provide null-safety for the whole Spring Framework API to Kotlin developers, with the advantage of dealing with null related issues at compile time.
// This feature can be enabled by adding the -Xjsr305 compiler flag with the strict options.
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
//            {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//    }
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin') // adds support for serialization/deserialization of Kotlin classes and data classes (single constructor classes can be used automatically, and those with secondary constructors or static factories are also supported)
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8") // is the Java 8 variant of Kotlin standard library
    implementation("org.jetbrains.kotlin:kotlin-reflect") // is Kotlin reflection library (mandatory as of Spring Framework 5)
    implementation('org.springframework.boot:spring-boot-configuration-processor')

    runtimeOnly('com.h2database:h2')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')

    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.1.1')
    testImplementation('org.springframework.boot:spring-boot-starter-webflux')

    // undertow
//    implementation('org.springframework.boot:spring-boot-starter-undertow')
}

test {
    useJUnitPlatform()
}
